#include<"string.txt">;
#include<"Array.txt">;

Struct{
	FILETIME:={
		N:dwLowDateTime,
		N:dwHighDateTime
	}
	
	WIN32_FIND_DATAW:={
		N:dwFileAttributes,
		FILETIME:ftCreationTime,
		FILETIME:ftLastAccessTime,
		FILETIME:ftLastWriteTime,
		N:nFileSizeHigh,
		N:nFileSizeLow,
		N:dwReserved0,
		N:dwReserved1,
		B:cFileName[512],// 256 * 2
		B:cAlternateFileName[28],// 14 * 2
		N:dwFileType,
		N:dwCreatorType,
		B:wFinderFlags[2]// WORD
	}
	
	CONSOLE_READCONSOLE_CONTROL:={
		N:nLength,
		N:nInitialChars,
		N:dwCtrlWakeupMask,
		N:dwControlKeyState
	}
}

Extra:"Kernel32.dll"{
	FindFirstFileW(
		N:lpFileName,
		WIN32_FIND_DATAW:lpFindFileData)->N:=FindFirstFileW;
	FindNextFileW(
		N:hFindFile,
		WIN32_FIND_DATAW:lpFindFileData)->N:=FindNextFileW;
	FindClose(
		N:hFindFile)->N:=FindClose;
	ReadConsoleW(
		N:hConsoleInput,
		N:lpBuffer,
		N:nNumberOfCharsToRead,
		N:lpNumberOfCharsRead,
		N:pInputControl)->N:=ReadConsoleW;
	GetStdHandle(
		N:nStdHandle)->N:=GetStdHandle;
	SetConsoleOutputCP(
		N:wCodePageID)->N:=SetConsoleOutputCP;
}

Class:Console{
	Public N:buffersize;
	Public N:buffer;
	_init_()->N:={
		buffersize=512;
		buffer=new(buffersize*2);
	}
	_destroy_()->N:={
		if(buffer!=0){
			free(buffer);
			buffer=0;
		}
	}
	Public resize(N:size)->N:={
		_destroy_();
		buffersize=size;
		buffer=new(buffersize*2);
	}
	Public InputEx()->string:={
		N:pszBuf=buffer;N:cchBuf=buffersize;
		N:hInput=GetStdHandle(-10);
		N:cchRead=0;
		CONSOLE_READCONSOLE_CONTROL:crcc;
		crcc.nLength=16;
		crcc.nInitialChars=0;
		crcc.dwCtrlWakeupMask=9217;
		crcc.dwControlKeyState=0;
		
		ReadConsoleW(hInput,pszBuf,cchBuf,&cchRead,&crcc);
		N:pEnd = pszBuf+(cchRead-1)*2;
		if(cchRead!=0)
		{
			pEnd->B=0;
			(pEnd+1)->B=0;
			cchRead=cchRead-1;
		}
		{
			pszBuf->B=0;
			(pszBuf+1)->B=0;
		};
		
		return(string(buffer));
	}
	Public =(Console:o)->Console:={
		resize(o.buffersize);
		memcopy(buffer,o.buffer,buffersize*2);
		return(this)
	}
	Public "return(Console)"(Console:o)->N:={
		resize(o.buffersize);
		memcopy(buffer,o.buffer,buffersize*2);
	}
	Public _new_()->Console:={
		resize(512);
		return(this)
	}
	Public _new_(N:size)->Console:={
		resize(size);
		return(this)
	}
}
Class:File{
	Public EnumFiles(string:path,Array:arr)->N:={
		WIN32_FIND_DATAW:wfd;
		N:hFind=FindFirstFileW(path,wfd);
		if(hFind==-1)
		{
			return(0);
		};
		N:c=1;
		while(FindNextFileW(hFind,wfd)!=0)
		{
			c=c+1;
		};
		FindClose(hFind);
		arr.ReDim(sizeof:string,c);
		N:hFind=FindFirstFileW(path,wfd);
		(arr[0]->string).const(&wfd.cFileName);
		for(N:i=0;i<c;i=i+1){
			FindNextFileW(hFind,wfd);
			(arr[i]->string).const(&wfd.cFileName);
		}
		return(c);
	}
}
System:System;
Class:System{
	Public Console:console;
	Public File:file;
	_init_()->N:={}
}


Main{
	main()->N:={
		WIN32_FIND_DATAW:wfd;
		string:cch=System.console.InputEx();
		print("\n");

		Array:arr;
		N:c=System.file.EnumFiles(cch,arr);
		
		print("枚举文件完成，共有 ");printN(c);print(" 个文件/文件夹");

		System.console.InputEx();
		return(0);
	}
}